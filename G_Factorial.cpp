#include <bits/stdc++.h>
using namespace std;

#define fast_input() ios::sync_with_stdio(false); cin.tie(nullptr);
#define int long long
#define pb push_back
#define nline <<'\n'
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define sz(x) (int)(x).size()
#define f first
#define s second
#define MOD 1000000007
#define endl "\n"

#define vi vector<int>

#define fr(i, a, b) for (int i = a; i < b; i++)
#define frr(i, a, b) for (int i = a; i > b; i--)

#define IN(a, n) vi a(n); fr(i, 0, n) cin >> a[i];

const int INF = LLONG_MAX >> 1;

//--------------------------------------------------------------------------------------------------------------------

//* Debuggers
#define debug(x) cout << #x << " = " << x << endl;


template<typename T>
void print_container(const T& container) {
    for (auto it = container.begin(); it != container.end(); ++it) {
        cout << *it;
        if (next(it) != container.end()) cout << " ";
    }
    cout << endl;
}
#define print(x) print_container(x);

//---------------------------------------------------------------------------------------------------------

//* Modular Multiplication
int mod_mul(int a, int b) {return ((a % MOD) * (b % MOD)) % MOD;}

//* Binary Exponentiation
int binpow(int a, int b, int m = MOD) {
    int res = 1;
    a %= m;
    while (b) {
        if (b & 1LL) res = res * a % m;
        a = mod_mul(a, a);
        b >>= 1LL;
    }
    return res;
}
 
//* Modular Addition
int mod_add(int a, int b) {return ((a % MOD) + (b % MOD)) % MOD;}
 
//* Modular Subtraction
int mod_sub(int a, int b) {return ((a % MOD) - (b % MOD) + MOD) % MOD;}
 
//* Modular Division (using Modular Inverse)
int mod_inv(int a, int m = MOD) {return binpow(a, m - 2, m);}  // Fermat's Little Theorem
 
int mod_div(int a, int b) {return mod_mul(a, mod_inv(b));}
 
//?----------------------------------------------------------------------------------------------------------

//! Factorial with modular arithmetic


vector<int> fact, inv_fact;
void init_factorial(int n, int m = MOD) {
    fact.resize(n + 1, 1);
    inv_fact.resize(n + 1, 1);
    for (int i = 2; i <= n; ++i) fact[i] = fact[i - 1] * i % m;
    inv_fact[n] = binpow(fact[n], m - 2, m); // Fermat's Little Theorem for modular inverse
    for (int i = n - 1; i >= 1; --i) inv_fact[i] = inv_fact[i + 1] * (i + 1) % m;
}
int nCr(int n, int r, int m = MOD) {
    if (r > n) return 0;
    return fact[n] * inv_fact[r] % m * inv_fact[n - r] % m;
}

//?-----------------------------------------------------------------------------------------------------------

void solve(){
    int n; cin >> n;
    if (n == 0){
        cout << 1 << endl;
    }
    for (int i = 1; i < 21; i++){
        v1.pb something
    }
    
}

signed main(){
    fast_input();

    int t=1;
    cin >> t;
    for (int i = 1; i <= t; i++){
        // cout << "Case " << i << ":" << endl;
        solve();
    }

    return 0;
}



// +===+==========+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ============+====+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ====================++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ==========+=====+=====++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ==================+=====++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// =========================+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ======================+====+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ===================+==++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ======================+++.....=+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ======================++........ .++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// =====================+++...::-=.. ..*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// =====================++= .:....:--. ..++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// =====================++=  -:....:---.. ..........:-+++++++++++++++++++++=.....=+++++++++++++++++++++
// =====================+++..:-:.....:---... ...........  .......+*++++++... .-. .+++++++++++++++++++++
// ======================++. .==-:....:=++++=====+++++++==--:...............-::. .+++++++++++++++++++++
// ======================++. .===-:::=*##**+**+++++++++++++====-----:....==-:::. .*++++++++++++++++++++
// ======================++=  =====-=+##****************++++++++++++****+=-::::. ..++++++++++++++++++++
// =======================++. .=======*#*+**#***********+**+++**#**+++=--::::::. ..++++++++++++++++++++
// =======================++...==++*++###*+**##++****+++***+***#####+=-::::::::. .+++++++++++++++++++++
// =======================++...-===++**#####+**#++-++*+=+#*+**####%*-:::::::::...-+++++++++++++++++++++
// =======================++...=====+*####%#**#%*+--+*+++*#*****#%+-::::::::::  .++++++++++++++++++++++
// ======================+++...====++**###%*=+%:=-::=++*##++***##==-------:::.  =++++++++++++++++++++++
// =====================++:.  :====++++**#+=:::::::::==##*+*+**++=====-==-::....+++++++++++++++++++++++
// ===================++:.. ..=====+++===+=::...:::-==+*==+=======------::.....:+++++++++++++++++++++++
// ================+++.. ..:======++==-----::::::::-=+====-+===-----:::::.... .++++++++++++++++++++++++
// ==============++....%@@@*+========----:-::::::.::+---------------::::..... .++++++++++++++++++++++++
// ==============+...+%%%%%#*+======-----:::::::::::::::-------:----::...::.  .++++++++++++++++++++++++
// ==============+....%%%%%%@@@@%#+===-----:::::::::::::-----::::--:::...-=.. ..+++++++++++++++++++++++
// ==============++. .@%%%%%%%%@@@@@@#*+======--=-==*%@@@@@@@@@@@%%%##+-:::...   ..++++++++++++++++++++
// ===============+. .%%%%%%%@@@@@@@@@@@@@%%%%@@@@@@@@@@@@%%%%%%%%%%-::::......... ..++++++++++++++++++
// ===============++  .@%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@*---::::........  .+++++++++++++++++
// ================++. .=%%%%%@@@@@@@@@@%**#@@@@@@@@@@@@@@@@@@@@@@@+=------::........ .=+++++++++++++++
// =================++.. .@@%@@@@@@@@@@%+---=%@%%@@%%%@@@@@@@@@@@@@@====-=--::........  =++++++++++++++
// ==================+.. -=*%@@@@@@@@@+==---:-#@@@%%%%%%%%%%%%%%@@@%========-:::.........++++++++++++++
// =================++...======+**#*=====-------#@@@@%%%%%%%%@@%+--======++=---:........ .+++++++++++++
// =================+. .-=======------=+++++==-::::-+#####*=--------==========-::..........++++++++++++
// ================+.. :===========-----=**=---:::::::::::-----------==========-::.........++++++++++++
// ===============+.  :==============----==-----:::::::::--------------==++++==-:::......  .+++++++++++
// ==============+=...===----===============-----::::::--------------===++===+===-::...... .+++++++++++
// =============++...-===------========+=======------------======----=============-::.......-++++++++++
// =============+...---=-------------===============-------------------===----===--:....... .++++===+++
// ============+. .:-------------------------------------::::::--------==----------:....... .+++=====++
// ===========+.. :------------------------------=------:-::::::-------------------:......:..++++=====+
// ==========+...:-==----------------------------------=-----------------------:::::......:...++====++=
// =========+.  :-==--------------------------=----:-:-------------===---------:::::......:...+++====++
// ========+:. :--------------------=======----::::-----=----------===--------::::::..........++=======
// ========+...----------------==-----=====+--:----------:::-------------------:::::..........+++======
// =========+..                             .....                      .                    ..++=======
// ===========+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++========
// =======================================================================================+============
// ====================================================================================================
// ====================================================================================================
// ====================================================================================================
// ====================================================================================================





//*     EmasculatorJi's Template//
//*     Last year to achieve my goals, pray_emoji